# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class AnalysisResultResponseMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'analyzer': 'str',
        'analyzer_version': 'str',
        'arguments': 'object',
        'datetime': 'str',
        'distribution': 'AnalysisResultResponseMetadataDistribution',
        'hostname': 'str',
        'python': 'AnalysisResultResponseMetadataPython'
    }

    attribute_map = {
        'analyzer': 'analyzer',
        'analyzer_version': 'analyzer_version',
        'arguments': 'arguments',
        'datetime': 'datetime',
        'distribution': 'distribution',
        'hostname': 'hostname',
        'python': 'python'
    }

    def __init__(self, analyzer=None, analyzer_version=None, arguments=None, datetime=None, distribution=None, hostname=None, python=None, local_vars_configuration=None):  # noqa: E501
        """AnalysisResultResponseMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._analyzer = None
        self._analyzer_version = None
        self._arguments = None
        self._datetime = None
        self._distribution = None
        self._hostname = None
        self._python = None
        self.discriminator = None

        self.analyzer = analyzer
        self.analyzer_version = analyzer_version
        self.arguments = arguments
        self.datetime = datetime
        self.distribution = distribution
        self.hostname = hostname
        self.python = python

    @property
    def analyzer(self):
        """Gets the analyzer of this AnalysisResultResponseMetadata.  # noqa: E501

        Analyzer name which handled analysis.  # noqa: E501

        :return: The analyzer of this AnalysisResultResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """Sets the analyzer of this AnalysisResultResponseMetadata.

        Analyzer name which handled analysis.  # noqa: E501

        :param analyzer: The analyzer of this AnalysisResultResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and analyzer is None:  # noqa: E501
            raise ValueError("Invalid value for `analyzer`, must not be `None`")  # noqa: E501

        self._analyzer = analyzer

    @property
    def analyzer_version(self):
        """Gets the analyzer_version of this AnalysisResultResponseMetadata.  # noqa: E501

        Version of analyzer handling analysis.  # noqa: E501

        :return: The analyzer_version of this AnalysisResultResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._analyzer_version

    @analyzer_version.setter
    def analyzer_version(self, analyzer_version):
        """Sets the analyzer_version of this AnalysisResultResponseMetadata.

        Version of analyzer handling analysis.  # noqa: E501

        :param analyzer_version: The analyzer_version of this AnalysisResultResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and analyzer_version is None:  # noqa: E501
            raise ValueError("Invalid value for `analyzer_version`, must not be `None`")  # noqa: E501

        self._analyzer_version = analyzer_version

    @property
    def arguments(self):
        """Gets the arguments of this AnalysisResultResponseMetadata.  # noqa: E501

        Arguments passed to analyzer.  # noqa: E501

        :return: The arguments of this AnalysisResultResponseMetadata.  # noqa: E501
        :rtype: object
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this AnalysisResultResponseMetadata.

        Arguments passed to analyzer.  # noqa: E501

        :param arguments: The arguments of this AnalysisResultResponseMetadata.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and arguments is None:  # noqa: E501
            raise ValueError("Invalid value for `arguments`, must not be `None`")  # noqa: E501

        self._arguments = arguments

    @property
    def datetime(self):
        """Gets the datetime of this AnalysisResultResponseMetadata.  # noqa: E501

        Date and time of analysis end in ISO format.  # noqa: E501

        :return: The datetime of this AnalysisResultResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this AnalysisResultResponseMetadata.

        Date and time of analysis end in ISO format.  # noqa: E501

        :param datetime: The datetime of this AnalysisResultResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and datetime is None:  # noqa: E501
            raise ValueError("Invalid value for `datetime`, must not be `None`")  # noqa: E501

        self._datetime = datetime

    @property
    def distribution(self):
        """Gets the distribution of this AnalysisResultResponseMetadata.  # noqa: E501


        :return: The distribution of this AnalysisResultResponseMetadata.  # noqa: E501
        :rtype: AnalysisResultResponseMetadataDistribution
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this AnalysisResultResponseMetadata.


        :param distribution: The distribution of this AnalysisResultResponseMetadata.  # noqa: E501
        :type: AnalysisResultResponseMetadataDistribution
        """
        if self.local_vars_configuration.client_side_validation and distribution is None:  # noqa: E501
            raise ValueError("Invalid value for `distribution`, must not be `None`")  # noqa: E501

        self._distribution = distribution

    @property
    def hostname(self):
        """Gets the hostname of this AnalysisResultResponseMetadata.  # noqa: E501

        Pod name where the analysis was done.  # noqa: E501

        :return: The hostname of this AnalysisResultResponseMetadata.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AnalysisResultResponseMetadata.

        Pod name where the analysis was done.  # noqa: E501

        :param hostname: The hostname of this AnalysisResultResponseMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and hostname is None:  # noqa: E501
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def python(self):
        """Gets the python of this AnalysisResultResponseMetadata.  # noqa: E501


        :return: The python of this AnalysisResultResponseMetadata.  # noqa: E501
        :rtype: AnalysisResultResponseMetadataPython
        """
        return self._python

    @python.setter
    def python(self, python):
        """Sets the python of this AnalysisResultResponseMetadata.


        :param python: The python of this AnalysisResultResponseMetadata.  # noqa: E501
        :type: AnalysisResultResponseMetadataPython
        """
        if self.local_vars_configuration.client_side_validation and python is None:  # noqa: E501
            raise ValueError("Invalid value for `python`, must not be `None`")  # noqa: E501

        self._python = python

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResultResponseMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalysisResultResponseMetadata):
            return True

        return self.to_dict() != other.to_dict()
