# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class AnalysisResultResponseMetadataPython(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "api_version": "int",
        "implementation_name": "str",
        "major": "int",
        "micro": "int",
        "minor": "int",
        "releaselevel": "str",
        "serial": "int",
    }

    attribute_map = {
        "api_version": "api_version",
        "implementation_name": "implementation_name",
        "major": "major",
        "micro": "micro",
        "minor": "minor",
        "releaselevel": "releaselevel",
        "serial": "serial",
    }

    def __init__(
        self,
        api_version=None,
        implementation_name=None,
        major=None,
        micro=None,
        minor=None,
        releaselevel=None,
        serial=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """AnalysisResultResponseMetadataPython - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._implementation_name = None
        self._major = None
        self._micro = None
        self._minor = None
        self._releaselevel = None
        self._serial = None
        self.discriminator = None

        self.api_version = api_version
        self.implementation_name = implementation_name
        self.major = major
        self.micro = micro
        self.minor = minor
        self.releaselevel = releaselevel
        self.serial = serial

    @property
    def api_version(self):
        """Gets the api_version of this AnalysisResultResponseMetadataPython.  # noqa: E501


        :return: The api_version of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :rtype: int
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this AnalysisResultResponseMetadataPython.


        :param api_version: The api_version of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and api_version is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `api_version`, must not be `None`"
            )  # noqa: E501

        self._api_version = api_version

    @property
    def implementation_name(self):
        """Gets the implementation_name of this AnalysisResultResponseMetadataPython.  # noqa: E501


        :return: The implementation_name of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :rtype: str
        """
        return self._implementation_name

    @implementation_name.setter
    def implementation_name(self, implementation_name):
        """Sets the implementation_name of this AnalysisResultResponseMetadataPython.


        :param implementation_name: The implementation_name of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and implementation_name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `implementation_name`, must not be `None`"
            )  # noqa: E501

        self._implementation_name = implementation_name

    @property
    def major(self):
        """Gets the major of this AnalysisResultResponseMetadataPython.  # noqa: E501


        :return: The major of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this AnalysisResultResponseMetadataPython.


        :param major: The major of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and major is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `major`, must not be `None`"
            )  # noqa: E501

        self._major = major

    @property
    def micro(self):
        """Gets the micro of this AnalysisResultResponseMetadataPython.  # noqa: E501


        :return: The micro of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :rtype: int
        """
        return self._micro

    @micro.setter
    def micro(self, micro):
        """Sets the micro of this AnalysisResultResponseMetadataPython.


        :param micro: The micro of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and micro is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `micro`, must not be `None`"
            )  # noqa: E501

        self._micro = micro

    @property
    def minor(self):
        """Gets the minor of this AnalysisResultResponseMetadataPython.  # noqa: E501


        :return: The minor of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this AnalysisResultResponseMetadataPython.


        :param minor: The minor of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and minor is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `minor`, must not be `None`"
            )  # noqa: E501

        self._minor = minor

    @property
    def releaselevel(self):
        """Gets the releaselevel of this AnalysisResultResponseMetadataPython.  # noqa: E501


        :return: The releaselevel of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :rtype: str
        """
        return self._releaselevel

    @releaselevel.setter
    def releaselevel(self, releaselevel):
        """Sets the releaselevel of this AnalysisResultResponseMetadataPython.


        :param releaselevel: The releaselevel of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and releaselevel is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `releaselevel`, must not be `None`"
            )  # noqa: E501

        self._releaselevel = releaselevel

    @property
    def serial(self):
        """Gets the serial of this AnalysisResultResponseMetadataPython.  # noqa: E501


        :return: The serial of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this AnalysisResultResponseMetadataPython.


        :param serial: The serial of this AnalysisResultResponseMetadataPython.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and serial is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `serial`, must not be `None`"
            )  # noqa: E501

        self._serial = serial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResultResponseMetadataPython):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalysisResultResponseMetadataPython):
            return True

        return self.to_dict() != other.to_dict()
