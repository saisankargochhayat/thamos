# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class PythonPackageMetadataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author': 'str',
        'author_email': 'str',
        'classifier': 'str',
        'description_content_type': 'str',
        'download_url': 'str',
        'home_page': 'str',
        'keywords': 'str',
        'license': 'str',
        'maintainer': 'str',
        'maintainer_email': 'str',
        'metadata_version': 'str',
        'name': 'str',
        'platform': 'str',
        'project_url': 'str',
        'provides_extra': 'str',
        'requires_dist': 'str',
        'requires_python': 'str',
        'summary': 'str',
        'version': 'str'
    }

    attribute_map = {
        'author': 'author',
        'author_email': 'author_email',
        'classifier': 'classifier',
        'description_content_type': 'description_content_type',
        'download_url': 'download_url',
        'home_page': 'home_page',
        'keywords': 'keywords',
        'license': 'license',
        'maintainer': 'maintainer',
        'maintainer_email': 'maintainer_email',
        'metadata_version': 'metadata_version',
        'name': 'name',
        'platform': 'platform',
        'project_url': 'project_url',
        'provides_extra': 'provides_extra',
        'requires_dist': 'requires_dist',
        'requires_python': 'requires_python',
        'summary': 'summary',
        'version': 'version'
    }

    def __init__(self, author=None, author_email=None, classifier=None, description_content_type=None, download_url=None, home_page=None, keywords=None, license=None, maintainer=None, maintainer_email=None, metadata_version=None, name=None, platform=None, project_url=None, provides_extra=None, requires_dist=None, requires_python=None, summary=None, version=None, local_vars_configuration=None):  # noqa: E501
        """PythonPackageMetadataResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._author = None
        self._author_email = None
        self._classifier = None
        self._description_content_type = None
        self._download_url = None
        self._home_page = None
        self._keywords = None
        self._license = None
        self._maintainer = None
        self._maintainer_email = None
        self._metadata_version = None
        self._name = None
        self._platform = None
        self._project_url = None
        self._provides_extra = None
        self._requires_dist = None
        self._requires_python = None
        self._summary = None
        self._version = None
        self.discriminator = None

        self.author = author
        self.author_email = author_email
        self.classifier = classifier
        self.description_content_type = description_content_type
        self.download_url = download_url
        self.home_page = home_page
        self.keywords = keywords
        self.license = license
        self.maintainer = maintainer
        self.maintainer_email = maintainer_email
        self.metadata_version = metadata_version
        self.name = name
        self.platform = platform
        self.project_url = project_url
        self.provides_extra = provides_extra
        self.requires_dist = requires_dist
        self.requires_python = requires_python
        self.summary = summary
        self.version = version

    @property
    def author(self):
        """Gets the author of this PythonPackageMetadataResponse.  # noqa: E501

        A string containing the author’s name.  # noqa: E501

        :return: The author of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PythonPackageMetadataResponse.

        A string containing the author’s name.  # noqa: E501

        :param author: The author of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def author_email(self):
        """Gets the author_email of this PythonPackageMetadataResponse.  # noqa: E501

        A string containing the author’s e-mail address.  # noqa: E501

        :return: The author_email of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this PythonPackageMetadataResponse.

        A string containing the author’s e-mail address.  # noqa: E501

        :param author_email: The author_email of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._author_email = author_email

    @property
    def classifier(self):
        """Gets the classifier of this PythonPackageMetadataResponse.  # noqa: E501

        Each entry is a string giving a single classification value for the distribution.  # noqa: E501

        :return: The classifier of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier):
        """Sets the classifier of this PythonPackageMetadataResponse.

        Each entry is a string giving a single classification value for the distribution.  # noqa: E501

        :param classifier: The classifier of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._classifier = classifier

    @property
    def description_content_type(self):
        """Gets the description_content_type of this PythonPackageMetadataResponse.  # noqa: E501

        Content-Type of description text.  # noqa: E501

        :return: The description_content_type of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._description_content_type

    @description_content_type.setter
    def description_content_type(self, description_content_type):
        """Sets the description_content_type of this PythonPackageMetadataResponse.

        Content-Type of description text.  # noqa: E501

        :param description_content_type: The description_content_type of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._description_content_type = description_content_type

    @property
    def download_url(self):
        """Gets the download_url of this PythonPackageMetadataResponse.  # noqa: E501

        A string containing the URL from which this version of the distribution can be downloaded.  # noqa: E501

        :return: The download_url of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PythonPackageMetadataResponse.

        A string containing the URL from which this version of the distribution can be downloaded.  # noqa: E501

        :param download_url: The download_url of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def home_page(self):
        """Gets the home_page of this PythonPackageMetadataResponse.  # noqa: E501

        A string containing the URL for the distribution’s home page.  # noqa: E501

        :return: The home_page of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._home_page

    @home_page.setter
    def home_page(self, home_page):
        """Sets the home_page of this PythonPackageMetadataResponse.

        A string containing the URL for the distribution’s home page.  # noqa: E501

        :param home_page: The home_page of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._home_page = home_page

    @property
    def keywords(self):
        """Gets the keywords of this PythonPackageMetadataResponse.  # noqa: E501

        A list of additional keywords to be used to assist searching for the distribution in a larger catalog.   # noqa: E501

        :return: The keywords of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this PythonPackageMetadataResponse.

        A list of additional keywords to be used to assist searching for the distribution in a larger catalog.   # noqa: E501

        :param keywords: The keywords of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def license(self):
        """Gets the license of this PythonPackageMetadataResponse.  # noqa: E501

        Text indicating the license covering the distribution.  # noqa: E501

        :return: The license of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this PythonPackageMetadataResponse.

        Text indicating the license covering the distribution.  # noqa: E501

        :param license: The license of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def maintainer(self):
        """Gets the maintainer of this PythonPackageMetadataResponse.  # noqa: E501

        A string containing the maintainer’s name at a minimum; additional contact information may be provided.   # noqa: E501

        :return: The maintainer of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this PythonPackageMetadataResponse.

        A string containing the maintainer’s name at a minimum; additional contact information may be provided.   # noqa: E501

        :param maintainer: The maintainer of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._maintainer = maintainer

    @property
    def maintainer_email(self):
        """Gets the maintainer_email of this PythonPackageMetadataResponse.  # noqa: E501

        A string containing the maintainer’s e-mail address.  # noqa: E501

        :return: The maintainer_email of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._maintainer_email

    @maintainer_email.setter
    def maintainer_email(self, maintainer_email):
        """Sets the maintainer_email of this PythonPackageMetadataResponse.

        A string containing the maintainer’s e-mail address.  # noqa: E501

        :param maintainer_email: The maintainer_email of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._maintainer_email = maintainer_email

    @property
    def metadata_version(self):
        """Gets the metadata_version of this PythonPackageMetadataResponse.  # noqa: E501

        Version of the file format.  # noqa: E501

        :return: The metadata_version of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._metadata_version

    @metadata_version.setter
    def metadata_version(self, metadata_version):
        """Sets the metadata_version of this PythonPackageMetadataResponse.

        Version of the file format.  # noqa: E501

        :param metadata_version: The metadata_version of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._metadata_version = metadata_version

    @property
    def name(self):
        """Gets the name of this PythonPackageMetadataResponse.  # noqa: E501

        Name of the distribution.  # noqa: E501

        :return: The name of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PythonPackageMetadataResponse.

        Name of the distribution.  # noqa: E501

        :param name: The name of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this PythonPackageMetadataResponse.  # noqa: E501

        A Platform specification describing an operating system supported by the distribution.  # noqa: E501

        :return: The platform of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this PythonPackageMetadataResponse.

        A Platform specification describing an operating system supported by the distribution.  # noqa: E501

        :param platform: The platform of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def project_url(self):
        """Gets the project_url of this PythonPackageMetadataResponse.  # noqa: E501

        URL to project.  # noqa: E501

        :return: The project_url of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this PythonPackageMetadataResponse.

        URL to project.  # noqa: E501

        :param project_url: The project_url of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._project_url = project_url

    @property
    def provides_extra(self):
        """Gets the provides_extra of this PythonPackageMetadataResponse.  # noqa: E501

        Provided extra of the distribution.  # noqa: E501

        :return: The provides_extra of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._provides_extra

    @provides_extra.setter
    def provides_extra(self, provides_extra):
        """Sets the provides_extra of this PythonPackageMetadataResponse.

        Provided extra of the distribution.  # noqa: E501

        :param provides_extra: The provides_extra of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._provides_extra = provides_extra

    @property
    def requires_dist(self):
        """Gets the requires_dist of this PythonPackageMetadataResponse.  # noqa: E501

        Each entry contains a string naming some other distutils project required by this distribution.   # noqa: E501

        :return: The requires_dist of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._requires_dist

    @requires_dist.setter
    def requires_dist(self, requires_dist):
        """Sets the requires_dist of this PythonPackageMetadataResponse.

        Each entry contains a string naming some other distutils project required by this distribution.   # noqa: E501

        :param requires_dist: The requires_dist of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._requires_dist = requires_dist

    @property
    def requires_python(self):
        """Gets the requires_python of this PythonPackageMetadataResponse.  # noqa: E501

        Python requirements for the distribution.  # noqa: E501

        :return: The requires_python of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._requires_python

    @requires_python.setter
    def requires_python(self, requires_python):
        """Sets the requires_python of this PythonPackageMetadataResponse.

        Python requirements for the distribution.  # noqa: E501

        :param requires_python: The requires_python of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._requires_python = requires_python

    @property
    def summary(self):
        """Gets the summary of this PythonPackageMetadataResponse.  # noqa: E501

        A one-line summary of what the distribution does.  # noqa: E501

        :return: The summary of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this PythonPackageMetadataResponse.

        A one-line summary of what the distribution does.  # noqa: E501

        :param summary: The summary of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def version(self):
        """Gets the version of this PythonPackageMetadataResponse.  # noqa: E501

        version of the distribution.  # noqa: E501

        :return: The version of this PythonPackageMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PythonPackageMetadataResponse.

        version of the distribution.  # noqa: E501

        :param version: The version of this PythonPackageMetadataResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PythonPackageMetadataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PythonPackageMetadataResponse):
            return True

        return self.to_dict() != other.to_dict()
