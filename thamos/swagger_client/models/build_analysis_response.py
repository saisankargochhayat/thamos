# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class BuildAnalysisResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_image_analysis': 'BuildAnalysisResponseBaseImageAnalysis',
        'build_log_analysis': 'BuildAnalysisResponseBaseImageAnalysis',
        'output_image_analysis': 'BuildAnalysisResponseBaseImageAnalysis'
    }

    attribute_map = {
        'base_image_analysis': 'base_image_analysis',
        'build_log_analysis': 'build_log_analysis',
        'output_image_analysis': 'output_image_analysis'
    }

    def __init__(self, base_image_analysis=None, build_log_analysis=None, output_image_analysis=None, local_vars_configuration=None):  # noqa: E501
        """BuildAnalysisResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base_image_analysis = None
        self._build_log_analysis = None
        self._output_image_analysis = None
        self.discriminator = None

        self.base_image_analysis = base_image_analysis
        self.build_log_analysis = build_log_analysis
        self.output_image_analysis = output_image_analysis

    @property
    def base_image_analysis(self):
        """Gets the base_image_analysis of this BuildAnalysisResponse.  # noqa: E501


        :return: The base_image_analysis of this BuildAnalysisResponse.  # noqa: E501
        :rtype: BuildAnalysisResponseBaseImageAnalysis
        """
        return self._base_image_analysis

    @base_image_analysis.setter
    def base_image_analysis(self, base_image_analysis):
        """Sets the base_image_analysis of this BuildAnalysisResponse.


        :param base_image_analysis: The base_image_analysis of this BuildAnalysisResponse.  # noqa: E501
        :type: BuildAnalysisResponseBaseImageAnalysis
        """
        if self.local_vars_configuration.client_side_validation and base_image_analysis is None:  # noqa: E501
            raise ValueError("Invalid value for `base_image_analysis`, must not be `None`")  # noqa: E501

        self._base_image_analysis = base_image_analysis

    @property
    def build_log_analysis(self):
        """Gets the build_log_analysis of this BuildAnalysisResponse.  # noqa: E501


        :return: The build_log_analysis of this BuildAnalysisResponse.  # noqa: E501
        :rtype: BuildAnalysisResponseBaseImageAnalysis
        """
        return self._build_log_analysis

    @build_log_analysis.setter
    def build_log_analysis(self, build_log_analysis):
        """Sets the build_log_analysis of this BuildAnalysisResponse.


        :param build_log_analysis: The build_log_analysis of this BuildAnalysisResponse.  # noqa: E501
        :type: BuildAnalysisResponseBaseImageAnalysis
        """
        if self.local_vars_configuration.client_side_validation and build_log_analysis is None:  # noqa: E501
            raise ValueError("Invalid value for `build_log_analysis`, must not be `None`")  # noqa: E501

        self._build_log_analysis = build_log_analysis

    @property
    def output_image_analysis(self):
        """Gets the output_image_analysis of this BuildAnalysisResponse.  # noqa: E501


        :return: The output_image_analysis of this BuildAnalysisResponse.  # noqa: E501
        :rtype: BuildAnalysisResponseBaseImageAnalysis
        """
        return self._output_image_analysis

    @output_image_analysis.setter
    def output_image_analysis(self, output_image_analysis):
        """Sets the output_image_analysis of this BuildAnalysisResponse.


        :param output_image_analysis: The output_image_analysis of this BuildAnalysisResponse.  # noqa: E501
        :type: BuildAnalysisResponseBaseImageAnalysis
        """
        if self.local_vars_configuration.client_side_validation and output_image_analysis is None:  # noqa: E501
            raise ValueError("Invalid value for `output_image_analysis`, must not be `None`")  # noqa: E501

        self._output_image_analysis = output_image_analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildAnalysisResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BuildAnalysisResponse):
            return True

        return self.to_dict() != other.to_dict()
