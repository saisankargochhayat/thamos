# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class InlineResponse2001RuntimeEnvironments(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'os_name': 'str',
        'os_version': 'str',
        'python_version': 'str'
    }

    attribute_map = {
        'os_name': 'os_name',
        'os_version': 'os_version',
        'python_version': 'python_version'
    }

    def __init__(self, os_name=None, os_version=None, python_version=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2001RuntimeEnvironments - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._os_name = None
        self._os_version = None
        self._python_version = None
        self.discriminator = None

        self.os_name = os_name
        self.os_version = os_version
        self.python_version = python_version

    @property
    def os_name(self):
        """Gets the os_name of this InlineResponse2001RuntimeEnvironments.  # noqa: E501

        Name of the operating system which is supported.  # noqa: E501

        :return: The os_name of this InlineResponse2001RuntimeEnvironments.  # noqa: E501
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this InlineResponse2001RuntimeEnvironments.

        Name of the operating system which is supported.  # noqa: E501

        :param os_name: The os_name of this InlineResponse2001RuntimeEnvironments.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and os_name is None:  # noqa: E501
            raise ValueError("Invalid value for `os_name`, must not be `None`")  # noqa: E501

        self._os_name = os_name

    @property
    def os_version(self):
        """Gets the os_version of this InlineResponse2001RuntimeEnvironments.  # noqa: E501

        Version of the operating system which is supported.  # noqa: E501

        :return: The os_version of this InlineResponse2001RuntimeEnvironments.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this InlineResponse2001RuntimeEnvironments.

        Version of the operating system which is supported.  # noqa: E501

        :param os_version: The os_version of this InlineResponse2001RuntimeEnvironments.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and os_version is None:  # noqa: E501
            raise ValueError("Invalid value for `os_version`, must not be `None`")  # noqa: E501

        self._os_version = os_version

    @property
    def python_version(self):
        """Gets the python_version of this InlineResponse2001RuntimeEnvironments.  # noqa: E501

        Supported Python version.  # noqa: E501

        :return: The python_version of this InlineResponse2001RuntimeEnvironments.  # noqa: E501
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this InlineResponse2001RuntimeEnvironments.

        Supported Python version.  # noqa: E501

        :param python_version: The python_version of this InlineResponse2001RuntimeEnvironments.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and python_version is None:  # noqa: E501
            raise ValueError("Invalid value for `python_version`, must not be `None`")  # noqa: E501

        self._python_version = python_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001RuntimeEnvironments):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2001RuntimeEnvironments):
            return True

        return self.to_dict() != other.to_dict()
