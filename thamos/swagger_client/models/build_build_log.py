# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class BuildBuildLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'apiversion': 'str',
        'kind': 'str',
        'log': 'str',
        'metadata': 'str'
    }

    attribute_map = {
        'apiversion': 'apiversion',
        'kind': 'kind',
        'log': 'log',
        'metadata': 'metadata'
    }

    def __init__(self, apiversion=None, kind=None, log=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """BuildBuildLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._apiversion = None
        self._kind = None
        self._log = None
        self._metadata = None
        self.discriminator = None

        self.apiversion = apiversion
        self.kind = kind
        self.log = log
        self.metadata = metadata

    @property
    def apiversion(self):
        """Gets the apiversion of this BuildBuildLog.  # noqa: E501

        BuildLog api version.   # noqa: E501

        :return: The apiversion of this BuildBuildLog.  # noqa: E501
        :rtype: str
        """
        return self._apiversion

    @apiversion.setter
    def apiversion(self, apiversion):
        """Sets the apiversion of this BuildBuildLog.

        BuildLog api version.   # noqa: E501

        :param apiversion: The apiversion of this BuildBuildLog.  # noqa: E501
        :type: str
        """

        self._apiversion = apiversion

    @property
    def kind(self):
        """Gets the kind of this BuildBuildLog.  # noqa: E501

        Type of log.   # noqa: E501

        :return: The kind of this BuildBuildLog.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BuildBuildLog.

        Type of log.   # noqa: E501

        :param kind: The kind of this BuildBuildLog.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def log(self):
        """Gets the log of this BuildBuildLog.  # noqa: E501

        A full build or installation log that was output during image build.   # noqa: E501

        :return: The log of this BuildBuildLog.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this BuildBuildLog.

        A full build or installation log that was output during image build.   # noqa: E501

        :param log: The log of this BuildBuildLog.  # noqa: E501
        :type: str
        """

        self._log = log

    @property
    def metadata(self):
        """Gets the metadata of this BuildBuildLog.  # noqa: E501


        :return: The metadata of this BuildBuildLog.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BuildBuildLog.


        :param metadata: The metadata of this BuildBuildLog.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildBuildLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BuildBuildLog):
            return True

        return self.to_dict() != other.to_dict()
