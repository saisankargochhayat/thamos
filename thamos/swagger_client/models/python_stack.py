# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class PythonStack(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'requirements': 'str',
        'requirements_format': 'list[str]',
        'requirements_lock': 'str'
    }

    attribute_map = {
        'requirements': 'requirements',
        'requirements_format': 'requirements_format',
        'requirements_lock': 'requirements_lock'
    }

    def __init__(self, requirements=None, requirements_format=None, requirements_lock=None, local_vars_configuration=None):  # noqa: E501
        """PythonStack - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._requirements = None
        self._requirements_format = None
        self._requirements_lock = None
        self.discriminator = None

        self.requirements = requirements
        if requirements_format is not None:
            self.requirements_format = requirements_format
        self.requirements_lock = requirements_lock

    @property
    def requirements(self):
        """Gets the requirements of this PythonStack.  # noqa: E501

        Direct dependencies for the application stack.  # noqa: E501

        :return: The requirements of this PythonStack.  # noqa: E501
        :rtype: str
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this PythonStack.

        Direct dependencies for the application stack.  # noqa: E501

        :param requirements: The requirements of this PythonStack.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and requirements is None:  # noqa: E501
            raise ValueError("Invalid value for `requirements`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                requirements is not None and len(requirements) < 1):
            raise ValueError("Invalid value for `requirements`, length must be greater than or equal to `1`")  # noqa: E501

        self._requirements = requirements

    @property
    def requirements_format(self):
        """Gets the requirements_format of this PythonStack.  # noqa: E501

        Lockfile format - defaults to pipenv if not explicitly specified.   # noqa: E501

        :return: The requirements_format of this PythonStack.  # noqa: E501
        :rtype: list[str]
        """
        return self._requirements_format

    @requirements_format.setter
    def requirements_format(self, requirements_format):
        """Sets the requirements_format of this PythonStack.

        Lockfile format - defaults to pipenv if not explicitly specified.   # noqa: E501

        :param requirements_format: The requirements_format of this PythonStack.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["pipenv", "requirements"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(requirements_format).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `requirements_format` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(requirements_format) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._requirements_format = requirements_format

    @property
    def requirements_lock(self):
        """Gets the requirements_lock of this PythonStack.  # noqa: E501

        Fully pinned down dependency stack.  # noqa: E501

        :return: The requirements_lock of this PythonStack.  # noqa: E501
        :rtype: str
        """
        return self._requirements_lock

    @requirements_lock.setter
    def requirements_lock(self, requirements_lock):
        """Sets the requirements_lock of this PythonStack.

        Fully pinned down dependency stack.  # noqa: E501

        :param requirements_lock: The requirements_lock of this PythonStack.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and requirements_lock is None:  # noqa: E501
            raise ValueError("Invalid value for `requirements_lock`, must not be `None`")  # noqa: E501

        self._requirements_lock = requirements_lock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PythonStack):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PythonStack):
            return True

        return self.to_dict() != other.to_dict()
