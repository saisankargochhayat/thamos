# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from thamos.swagger_client.configuration import Configuration


class AnalysisResultResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"metadata": "AnalysisResultResponseMetadata", "result": "object"}

    attribute_map = {"metadata": "metadata", "result": "result"}

    def __init__(
        self, metadata=None, result=None, local_vars_configuration=None
    ):  # noqa: E501
        """AnalysisResultResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._metadata = None
        self._result = None
        self.discriminator = None

        self.metadata = metadata
        self.result = result

    @property
    def metadata(self):
        """Gets the metadata of this AnalysisResultResponse.  # noqa: E501


        :return: The metadata of this AnalysisResultResponse.  # noqa: E501
        :rtype: AnalysisResultResponseMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AnalysisResultResponse.


        :param metadata: The metadata of this AnalysisResultResponse.  # noqa: E501
        :type: AnalysisResultResponseMetadata
        """
        if (
            self.local_vars_configuration.client_side_validation and metadata is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `metadata`, must not be `None`"
            )  # noqa: E501

        self._metadata = metadata

    @property
    def result(self):
        """Gets the result of this AnalysisResultResponse.  # noqa: E501

        Actual result of an analysis run.  # noqa: E501

        :return: The result of this AnalysisResultResponse.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AnalysisResultResponse.

        Actual result of an analysis run.  # noqa: E501

        :param result: The result of this AnalysisResultResponse.  # noqa: E501
        :type: object
        """
        if (
            self.local_vars_configuration.client_side_validation and result is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `result`, must not be `None`"
            )  # noqa: E501

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResultResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalysisResultResponse):
            return True

        return self.to_dict() != other.to_dict()
