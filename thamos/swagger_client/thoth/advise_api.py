# coding: utf-8

"""
    Thoth User API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.6.0-dev
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from thamos.swagger_client.api_client import ApiClient
from thamos.swagger_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class AdviseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_advise_python(self, analysis_id, **kwargs):  # noqa: E501
        """Get computed adviser result based on its id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advise_python(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_id: Advise id returned on advise request. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_advise_python_with_http_info(
            analysis_id, **kwargs
        )  # noqa: E501

    def get_advise_python_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Get computed adviser result based on its id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advise_python_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_id: Advise id returned on advise request. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisResultResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["analysis_id"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advise_python" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and (
            "analysis_id" not in local_var_params
            or local_var_params["analysis_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `analysis_id` when calling `get_advise_python`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "analysis_id" in local_var_params:
            path_params["analysis_id"] = local_var_params["analysis_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/advise/python/{analysis_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AnalysisResultResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_advise_python_log(self, analysis_id, **kwargs):  # noqa: E501
        """Retrieve a adviser run log.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advise_python_log(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_id: An id of analysis for which log should be retrieved. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_advise_python_log_with_http_info(
            analysis_id, **kwargs
        )  # noqa: E501

    def get_advise_python_log_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Retrieve a adviser run log.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advise_python_log_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_id: An id of analysis for which log should be retrieved. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisLogResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["analysis_id"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advise_python_log" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and (
            "analysis_id" not in local_var_params
            or local_var_params["analysis_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `analysis_id` when calling `get_advise_python_log`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "analysis_id" in local_var_params:
            path_params["analysis_id"] = local_var_params["analysis_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/advise/python/{analysis_id}/log",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AnalysisLogResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_advise_python_status(self, analysis_id, **kwargs):  # noqa: E501
        """Show status of an adviser computing recommendations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advise_python_status(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_id: An id of requested adviser run. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.get_advise_python_status_with_http_info(
            analysis_id, **kwargs
        )  # noqa: E501

    def get_advise_python_status_with_http_info(
        self, analysis_id, **kwargs
    ):  # noqa: E501
        """Show status of an adviser computing recommendations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_advise_python_status_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str analysis_id: An id of requested adviser run. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisStatusResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["analysis_id"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advise_python_status" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and (
            "analysis_id" not in local_var_params
            or local_var_params["analysis_id"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `analysis_id` when calling `get_advise_python_status`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "analysis_id" in local_var_params:
            path_params["analysis_id"] = local_var_params["analysis_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/advise/python/{analysis_id}/status",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AnalysisStatusResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def list_advise_python(self, **kwargs):  # noqa: E501
        """Get adviser results available.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_advise_python(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: Page offset in pagination.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.list_advise_python_with_http_info(**kwargs)  # noqa: E501

    def list_advise_python_with_http_info(self, **kwargs):  # noqa: E501
        """Get adviser results available.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_advise_python_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: Page offset in pagination.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisListingResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ["page"]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_advise_python" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if (
            "page" in local_var_params and local_var_params["page"] is not None
        ):  # noqa: E501
            query_params.append(("page", local_var_params["page"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/advise/python",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AnalysisListingResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_advise_python(
        self, recommendation_type, advise_input, **kwargs
    ):  # noqa: E501
        """Get advise for Python ecosystem.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_advise_python(recommendation_type, advise_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str recommendation_type: Recommendation type. (required)
        :param AdviseInput advise_input: Specification of Python application stack with runtime specific information. (required)
        :param int count: Number of software stacks that should be returned.
        :param int limit: Limit number of software stacks scored.
        :param str origin: A repository where the application stack is used. This is used for tracking as well as for automated reporting when results are available.
        :param str source_type: A flag marking what Thoth integration is requesting adviser:   - cli: Thamos CLI.   - s2i: OpenShift's S2I (Source-to-Image) build.   - github_app: Qeb-Hwt GitHub App.   - kebechet: Kebechet Bot.   - jupyter_notebook: Jupyter Notebook (nb-requirements).
        :param bool dev: Consider or do not consider development dependencies when resolving stacks.
        :param bool debug: Run the given adviser in a verbose mode so developers can debug it.
        :param bool force: Do not use cached results, always run adviser.
        :param str github_event_type: GitHub's event type.
        :param int github_check_run_id: GitHub's event id.
        :param int github_installation_id: GitHub's installation id.
        :param str github_base_repo_url: URL of the GitHub repository containing the Pull Request.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalysisResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        return self.post_advise_python_with_http_info(
            recommendation_type, advise_input, **kwargs
        )  # noqa: E501

    def post_advise_python_with_http_info(
        self, recommendation_type, advise_input, **kwargs
    ):  # noqa: E501
        """Get advise for Python ecosystem.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_advise_python_with_http_info(recommendation_type, advise_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str recommendation_type: Recommendation type. (required)
        :param AdviseInput advise_input: Specification of Python application stack with runtime specific information. (required)
        :param int count: Number of software stacks that should be returned.
        :param int limit: Limit number of software stacks scored.
        :param str origin: A repository where the application stack is used. This is used for tracking as well as for automated reporting when results are available.
        :param str source_type: A flag marking what Thoth integration is requesting adviser:   - cli: Thamos CLI.   - s2i: OpenShift's S2I (Source-to-Image) build.   - github_app: Qeb-Hwt GitHub App.   - kebechet: Kebechet Bot.   - jupyter_notebook: Jupyter Notebook (nb-requirements).
        :param bool dev: Consider or do not consider development dependencies when resolving stacks.
        :param bool debug: Run the given adviser in a verbose mode so developers can debug it.
        :param bool force: Do not use cached results, always run adviser.
        :param str github_event_type: GitHub's event type.
        :param int github_check_run_id: GitHub's event id.
        :param int github_installation_id: GitHub's installation id.
        :param str github_base_repo_url: URL of the GitHub repository containing the Pull Request.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalysisResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            "recommendation_type",
            "advise_input",
            "count",
            "limit",
            "origin",
            "source_type",
            "dev",
            "debug",
            "force",
            "github_event_type",
            "github_check_run_id",
            "github_installation_id",
            "github_base_repo_url",
        ]
        all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
            ]
        )

        for key, val in six.iteritems(local_var_params["kwargs"]):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_advise_python" % key
                )
            local_var_params[key] = val
        del local_var_params["kwargs"]
        # verify the required parameter 'recommendation_type' is set
        if self.api_client.client_side_validation and (
            "recommendation_type" not in local_var_params
            or local_var_params["recommendation_type"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `recommendation_type` when calling `post_advise_python`"
            )  # noqa: E501
        # verify the required parameter 'advise_input' is set
        if self.api_client.client_side_validation and (
            "advise_input" not in local_var_params
            or local_var_params["advise_input"] is None  # noqa: E501
        ):  # noqa: E501
            raise ApiValueError(
                "Missing the required parameter `advise_input` when calling `post_advise_python`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if (
            "recommendation_type" in local_var_params
            and local_var_params["recommendation_type"] is not None
        ):  # noqa: E501
            query_params.append(
                ("recommendation_type", local_var_params["recommendation_type"])
            )  # noqa: E501
        if (
            "count" in local_var_params and local_var_params["count"] is not None
        ):  # noqa: E501
            query_params.append(("count", local_var_params["count"]))  # noqa: E501
        if (
            "limit" in local_var_params and local_var_params["limit"] is not None
        ):  # noqa: E501
            query_params.append(("limit", local_var_params["limit"]))  # noqa: E501
        if (
            "origin" in local_var_params and local_var_params["origin"] is not None
        ):  # noqa: E501
            query_params.append(("origin", local_var_params["origin"]))  # noqa: E501
        if (
            "source_type" in local_var_params
            and local_var_params["source_type"] is not None
        ):  # noqa: E501
            query_params.append(
                ("source_type", local_var_params["source_type"])
            )  # noqa: E501
        if (
            "dev" in local_var_params and local_var_params["dev"] is not None
        ):  # noqa: E501
            query_params.append(("dev", local_var_params["dev"]))  # noqa: E501
        if (
            "debug" in local_var_params and local_var_params["debug"] is not None
        ):  # noqa: E501
            query_params.append(("debug", local_var_params["debug"]))  # noqa: E501
        if (
            "force" in local_var_params and local_var_params["force"] is not None
        ):  # noqa: E501
            query_params.append(("force", local_var_params["force"]))  # noqa: E501
        if (
            "github_event_type" in local_var_params
            and local_var_params["github_event_type"] is not None
        ):  # noqa: E501
            query_params.append(
                ("github_event_type", local_var_params["github_event_type"])
            )  # noqa: E501
        if (
            "github_check_run_id" in local_var_params
            and local_var_params["github_check_run_id"] is not None
        ):  # noqa: E501
            query_params.append(
                ("github_check_run_id", local_var_params["github_check_run_id"])
            )  # noqa: E501
        if (
            "github_installation_id" in local_var_params
            and local_var_params["github_installation_id"] is not None
        ):  # noqa: E501
            query_params.append(
                ("github_installation_id", local_var_params["github_installation_id"])
            )  # noqa: E501
        if (
            "github_base_repo_url" in local_var_params
            and local_var_params["github_base_repo_url"] is not None
        ):  # noqa: E501
            query_params.append(
                ("github_base_repo_url", local_var_params["github_base_repo_url"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "advise_input" in local_var_params:
            body_params = local_var_params["advise_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/advise/python",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AnalysisResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get("async_req"),
            _return_http_data_only=local_var_params.get(
                "_return_http_data_only"
            ),  # noqa: E501
            _preload_content=local_var_params.get("_preload_content", True),
            _request_timeout=local_var_params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
